{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack:///./node_modules/@babel/runtime/helpers/createClass.js","webpack:///./src/client/workers/starSystem.js","webpack:///./src/utils/mathFunctions.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","ns","key","__esModule","create","bind","n","object","property","prototype","hasOwnProperty","p","s","27","e","instance","Constructor","TypeError","_classCallCheck","_defineProperties","target","props","descriptor","length","configurable","writable","protoProps","staticProps","_createClass","center","timerID","CelestialBody","color","radius","options","arguments","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default","this","hiddenRadius","add","direction","subtract","angle","startAngle","speed","u","xRadius","yRadius","points","getEllipsePoints","getCirclePoints","centerPoints","isShown","x","y","diameter","onmessage","msg","width","height","bigStar","smallerStar","stars","planetRadius","smallPlanet","planetTwo","pradius","xradius","planetThree","ePradius","exradius","planet","sPlanet","ePlanet","data","setWidthHeight","getRectangleCenter","divide","getRectangleCorner","setupPoints","getCurrentPosition","Math","floor","postMessage","white","planets","shownPlanet","concat","setInterval","blackPlanet","sBlackPlanet","eBlackPlanet","sShownPlanet","eShownPlanet","mfCentersDistance","centersDistance","radiusIntersect","radiusClose","black","increment","distanceBetweenCirclesCenters","ceil","square","console","log","stop","clearInterval","hexidecimal","MathFunctions","result","multiply","pow","cube","computeLineLength","x1","y1","x2","y2","xdiff","ydiff","total","sqrt","computePerimeterByLength","side1","side2","side3","side4","convertFromBaseTenToBaseX","xbase","inval","xinval","remainder","getEllipsePoint","xr","yr","rAngle","degreesToRadians","cos","sin","round","startPoint","nextPoints","push","getCirclePoint","diffXSqr","diffYSqr","p1","p2","PI","__webpack_exports__","computePerimeter","x3","y3","x4","y4","computePerimeterOfSquare","side","areaOfTriangle","base","areaOfTrapizoid","abase","bbase","pythagorean","a","b","average","_arguments","sum","keys","forEach","areaOfCircle","circumferenceOfACircle","surfaceAreaCone","sqrtTotal","sumtotal","volumeCone","surfaceAreaCylinder","volumeCylinder","surfaceAreaSphere","volumeSphere","inverse","oneOver","factorial","convertFromBaseXToBaseTen","incount","ivlen","num","valueToInt","end","charAt","radiansToDegrees","generateGUID","hexval","Date","getTime","guid","substring"],"mappings":"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","file":"starSystem.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 42);\n","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","import {\n    add,\n    subtract,\n    divide,\n    multiply,\n    getRectangleCenter,\n    getRectangleCorner,\n    getCurrentPosition,\n    distanceBetweenCirclesCenters,\n    getEllipsePoints,\n    getCirclePoints,\n    square\n} from 'utils/mathFunctions';\n\nconst self = this,\n    timeout = 100;\n\nlet center,\n    timerID;\n\nclass CelestialBody {\n\n    constructor( color, radius, options = {} ) {\n\n        this.color = color || 'red';\n        this.radius = radius || 5;\n        this.hiddenRadius = add( this.radius, 1 );\n        this.direction = options.direction && options.direction === 'clockwise' ? add : subtract;\n        this.angle = options.startAngle || 0;\n        this.speed = options.speed || 1;\n    }\n\n    setupPoints( xRadius = 30, yRadius ) {\n\n        if ( xRadius !== yRadius && yRadius ) {\n            this.points = getEllipsePoints( xRadius, yRadius );\n        } else {\n            this.points = getCirclePoints( xRadius );\n        }\n    }\n\n    increment() {\n        this.angle = this.direction( this.angle, this.speed );\n        if ( this.angle < 0 ) {\n            this.angle = 360;\n        } else if ( this.angle > 360 ) {\n            this.angle = 0;\n        }\n    }\n\n    getCurrentPosition( centerPoints, isShown ) {\n\n        return {\n            x: ( this.direction( centerPoints.x, this.points[ this.angle ].x ) ),\n            y: ( this.direction( centerPoints.y, this.points[ this.angle ].y ) ),\n            diameter: ( isShown ? this.radius : this.hiddenRadius ),\n            color: ( isShown ? this.color : 'black' )\n        };\n    }\n}\n\nonmessage = ( msg ) => {\n\n    if ( msg && msg.data && msg.data.setWidthHeight ) {\n        const width = msg.data.setWidthHeight[ 0 ],\n            height = msg.data.setWidthHeight[ 1 ];\n\n        center = getRectangleCenter( width, height );\n\n        const radius = divide( getRectangleCorner( width, height ), 1.25 );\n\n        // stars\n        const bigStar = new CelestialBody( '#FDB813', 24, {\n            direction: 'counterClockwise',\n            startAngle: 180\n        } );\n        bigStar.setupPoints( radius );\n\n        const smallerStar = new CelestialBody( '#FDB813', 18, {\n            direction: 'counterClockwise',\n            startAngle: 0\n        } );\n        smallerStar.setupPoints( radius );\n\n        const stars = [\n            bigStar.getCurrentPosition( center, true ),\n            smallerStar.getCurrentPosition( center, true ),\n        ];\n\n        // planets\n        const planetRadius = Math.floor( divide( radius, ( width > 600 ? 3 : 1.65 ) ) );\n        const smallPlanet = new CelestialBody( '#17e3ea', 3, {\n            direction: 'counterClockwise',\n            startAngle: 90,\n            speed: 5\n        } );\n        smallPlanet.setupPoints( planetRadius );\n\n        const planetTwo = new CelestialBody( '#17e3ea', 7, {\n            direction: 'counterClockwise',\n            startAngle: 180,\n            speed: 3\n        } );\n        const pradius = add( planetRadius, ( width > 600 ? 28 : 17 ) );\n        const xradius = add( pradius, ( width > 600 ? 50 : 8 ) );\n        planetTwo.setupPoints( pradius, xradius );\n\n        const planetThree = new CelestialBody( '#17e3ea', ( width > 600 ? 6 : 0 ), {\n            direction: 'counterClockwise',\n            startAngle: 270,\n            speed: 1\n        } );\n        const ePradius = add( radius, 75 );\n        const exradius = add( ePradius, 55 );\n        planetThree.setupPoints( ePradius, exradius );\n\n        const planet = [ smallPlanet.getCurrentPosition( stars[ 0 ], true ) ],\n            sPlanet = [ planetTwo.getCurrentPosition( stars[ 0 ], true ) ],\n            ePlanet = [ planetThree.getCurrentPosition( stars[ 0 ], true ) ];\n\n        postMessage( {\n            stars: {\n                white: stars\n            },\n            planets: {\n                shownPlanet: planet.concat( sPlanet, ePlanet )\n            }\n        } );\n\n        timerID = setInterval( () => {\n\n            const black = [\n                bigStar.getCurrentPosition( center, false ),\n                smallerStar.getCurrentPosition( center, false ),\n            ];\n            bigStar.increment();\n            smallerStar.increment();\n            const blackPlanet = [ smallPlanet.getCurrentPosition( black[ 0 ], false ) ];\n            const sBlackPlanet = [ planetTwo.getCurrentPosition( black[ 0 ], false ) ];\n            const eBlackPlanet = [ planetThree.getCurrentPosition( black[ 0 ], false ) ];\n\n            const white = [\n                bigStar.getCurrentPosition( center, true ),\n                smallerStar.getCurrentPosition( center, true ),\n            ];\n            smallPlanet.increment();\n            planetTwo.increment();\n            planetThree.increment();\n            const shownPlanet = [ smallPlanet.getCurrentPosition( white[ 0 ], true ) ];\n            const sShownPlanet = [ planetTwo.getCurrentPosition( white[ 0 ], true ) ];\n            const eShownPlanet = [ planetThree.getCurrentPosition( white[ 0 ], true ) ];\n\n            // check if 2 circles intersect\n            const mfCentersDistance = distanceBetweenCirclesCenters( sShownPlanet[ 0 ].x, sShownPlanet[ 0 ].y, eShownPlanet[ 0 ].x, eShownPlanet[ 0 ].y );\n            const centersDistance = Math.ceil( square( mfCentersDistance ) );\n\n            // radius + 5 in case they are near\n            const radiusIntersect = square( add( 7, 6 ) ),\n                radiusClose = square( add( 7, 5, 6, 5 ) );\n\n            // touch\n            if ( centersDistance === radiusIntersect ) {\n                console.log( 'Touching %s %s %s %s', sShownPlanet[ 0 ].x, sShownPlanet[ 0 ].y, eShownPlanet[ 0 ].x, eShownPlanet[ 0 ].y );\n            }\n            if ( centersDistance === radiusClose ) {\n                console.log( 'Close touching %s %s %s %s', sShownPlanet[ 0 ].x, sShownPlanet[ 0 ].y, eShownPlanet[ 0 ].x, eShownPlanet[ 0 ].y );\n            }\n            // intersect\n            if ( centersDistance < radiusIntersect ) {\n                console.log( 'Intersecting %s %s %s %s', sShownPlanet[ 0 ].x, sShownPlanet[ 0 ].y, eShownPlanet[ 0 ].x, eShownPlanet[ 0 ].y );\n            }\n            if ( centersDistance < radiusClose ) {\n                console.log( 'Close intersecting %s %s %s %s', sShownPlanet[ 0 ].x, sShownPlanet[ 0 ].y, eShownPlanet[ 0 ].x, eShownPlanet[ 0 ].y );\n            }\n\n            postMessage( {\n                stars: {\n                    black,\n                    white\n                },\n                planets: {\n                    blackPlanet: blackPlanet.concat( sBlackPlanet, eBlackPlanet ),\n                    shownPlanet: shownPlanet.concat( sShownPlanet, eShownPlanet )\n                }\n            } );\n\n        }, timeout );\n    } else if ( msg && msg.data && msg.data.stop ) {\n        clearInterval( timerID );\n    }\n};\n","/** Math object gives us\n * abs(x) \t\tReturns the absolute value of a number\n * acos(x) \t\tReturns the arccosine of a number\n * asin(x) \t\tReturns the arcsine of a number\n * atan(x) \t\tReturns the arctangent of x as a numeric value between -PI/2 and PI/2 radians\n * atan2(y,x) \tReturns the angle theta of an (x,y) point as a numeric value between -PI and PI radians\n * ceil(x) \t\tReturns the value of a number rounded upwards to the nearest integer\n * cos(x) \t\tReturns the cosine of a number\n * exp(x) \t\tReturns the value of Ex\n * floor(x) \t\tReturns the value of a number rounded downwards to the nearest integer\n * log(x) \t\tReturns the natural logarithm (base E) of a number\n * max(x,y) \t\tReturns the number with the highest value of x and y\n * min(x,y) \t\tReturns the number with the lowest value of x and y\n * pow(x,y) \t\tReturns the value of x to the power of y\n * random() \t\tReturns a random number between 0 and 1\n * round(x) \t\tRounds a number to the nearest integer\n * sin(x) \t\tReturns the sine of a number\n * sqrt(x) \t\tReturns the square root of a number\n * tan(x) \t\tReturns the tangent of an angle\n * toSource() \tRepresents the source code of an object\n * valueOf() \tReturns the primitive value of a Math object\n * and more\n * extend the Math object in JavaScript\n * the Math object is static, so you do not call new on it, just set a reference to it\n */\n\n/**\n * add(x,y, ...)                Returns x + y [can handle more than 2 parameters ]\n */\nfunction add() {\n    let result = 0;\n    for ( let x = 0; x < arguments.length; x += 1 ) {\n        result += ( +arguments[ x ] );\n    }\n    return result;\n};\n\n/**\n * subtract(x,y)        Returns x - y\n */\nfunction subtract( x, y ) {\n    return ( ( +x ) - ( +y ) );\n};\n\n/**\n * multiply(x,y, ...)         Returns x * y   [can handle more than 2 parameters ]\n */\nfunction multiply() {\n    let result = 1;\n    for ( let x = 0; x < arguments.length; x += 1 ) {\n        let y = result;\n        result = ( +y ) * ( +arguments[ x ] );\n    }\n    return result;\n};\n\n/**\n * divide(x,y)            Returns x / y\n */\nfunction divide( x, y ) {\n    return ( ( +x ) / ( +y ) );\n};\n\n/**\n * squares a number\n * x * x or Math.pow(x,2)\n */\nfunction square( x ) {\n    return Math.pow( x, 2 );\n};\n\n/**\n * cubes a number\n * x * x * x or Math.pow(x,3)\n */\nfunction cube( x ) {\n    return Math.pow( x, 3 );\n};\n\n/**\n * computes the length of a line in an X-Y plane\n * using the pythagorean theorem ( x^2 + y^2 = z^2) and solving for z\n */\nfunction computeLineLength( x1, y1, x2, y2 ) {\n    let xdiff = subtract( x2, x1 );\n    let ydiff = subtract( y2, y1 );\n    let total = add( square( xdiff ), square( ydiff ) );\n    return Math.sqrt( total );\n};\n\n/**\n * computes the perimeter of a 4 sided object, given 4 points\n */\nfunction computePerimeter( x1, y1, x2, y2, x3, y3, x4, y4 ) {\n    let line1 = computeLineLength( x1, y1, x2, y2 );\n    let line2 = computeLineLength( x2, y2, x3, y3 );\n    let line3 = computeLineLength( x3, y3, x4, y4 );\n    let line4 = computeLineLength( x4, y4, x1, y1 );\n    return computePerimeterByLength( line1, line2, line3, line4 );\n};\n\n/**\n * computes the perimeter of a 4 sided object\n */\nfunction computePerimeterByLength( side1, side2, side3, side4 ) {\n    return add( side1, side2, side3, side4 );\n};\n\n/**\n * computes the perimeter of a square\n */\nfunction computePerimeterOfSquare( side ) {\n    return multiply( side, 4 );\n};\n\n/* compute area of a triangle */\nfunction areaOfTriangle( base, height ) {\n    return multiply( base, height, .5 );\n};\n\n/* compute area of a trapizoid */\nfunction areaOfTrapizoid( height, abase, bbase ) {\n    let a1, a2;\n    a1 = add( abase, bbase );\n    a2 = divide( a1, 2 );\n    return multiply( height, a2 );\n};\n\nfunction pythagorean( a, b ) {\n    // return C given a^2 + b^2 = c^2\n    return Math.sqrt( square( a ) + square( b ) );\n};\n\n/* compute average */\nfunction average() {\n    let sum = 0;\n    Object.keys( arguments ).forEach( ( e ) => {\n        sum = add( sum, arguments[ e ] );\n    } );\n    return divide( sum, arguments.length );\n};\n\n/* compute area of a circle */\nfunction areaOfCircle( radius ) {\n    return multiply( Math.PI, square( radius ) );\n};\n\n/* compute the circumference of a circle */\nfunction circumferenceOfACircle( radius ) {\n    return multiply( 2, Math.PI, radius );\n};\n\n/* compute the surface area of a cone */\nfunction surfaceAreaCone( radius, height ) {\n    let sqrtTotal = Math.sqrt( multiply( Math.PI, square( radius ) ) );\n    let sumtotal = add( square( radius ), square( height ) );\n    let radiuisTotal = multiply( radius, Math.PI, sumtotal );\n    return add( sqrtTotal, radiuisTotal );\n};\n\n/* compute volume of a cone */\nfunction volumeCone( radius, height ) {\n    return multiply( ( 1 / 3 ), Math.PI, square( radius ), height );\n};\n\n/* compute the surface area of a cylinder */\nfunction surfaceAreaCylinder( radius, height ) {\n    let radiusTotal = multiply( 2, Math.PI, square( radius ) );\n    let heightTotal = multiply( 2, Math.PI, radius, height );\n    return add( radiusTotal, heightTotal );\n};\n\n/* compute the volume of a cylinder */\nfunction volumeCylinder( radius, height ) {\n    return multiply( Math.PI, square( radius ), height );\n};\n\n/* compute the surface area of a sphere */\nfunction surfaceAreaSphere( radius ) {\n    return multiply( 4, Math.PI, square( radius ) );\n};\n\n/* compute the volume of a sphere */\nfunction volumeSphere( radius ) {\n    return multiply( ( 4 / 3 ), Math.PI, cube( radius ) );\n};\n\n/* invert a value */\nfunction inverse( x ) {\n    return multiply( -1, x );\n};\n\nfunction oneOver( x ) {\n    return divide( 1, x );\n};\n\n/* compute a factorial */\nfunction factorial( x ) {\n    if ( ( +x ) <= 1 ) {\n        return 1;\n    }\n    let f = ( +x ) - 1;\n    return multiply( x, factorial( f ) );\n};\n\nconst hexidecimal = [ \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\" ];\n\n/* convert from base ten to base x\n * not so good at converting from base 10 to base 10\n * up to base 16 or HEX */\nfunction convertFromBaseTenToBaseX( xbase, inval ) {\n    let xinval = inval;\n    let remainder = hexidecimal[ xinval % xbase ];\n    while ( xinval >= xbase ) {\n        let r1 = subtract( xinval, ( xinval % xbase ) );\n        xinval = divide( r1, xbase );\n        // in this case we do not want to add we want to append the strings together\n        if ( xinval >= xbase ) {\n            remainder = hexidecimal[ xinval % xbase ] + remainder;\n        } else {\n            remainder = hexidecimal[ xinval ] + remainder;\n        }\n    }\n    return remainder;\n};\n\n/* convert from base x to base ten\n * up to base 16 or HEX */\nfunction convertFromBaseXToBaseTen( xbase, inval ) {\n    let remainder = 0;\n    let num = 1;\n\n    function valueToInt( x ) {\n        let result = '';\n        for ( let p = 0, end = hexidecimal.length; p < end; p += 1 ) {\n            if ( hexidecimal[ p ] === x ) {\n                result = p;\n                break;\n            }\n        }\n        return result;\n    }\n\n    while ( num <= inval.length ) {\n        let incount = Math.pow( xbase, subtract( num, 1 ) );\n        let ivlen = subtract( inval.length, num );\n        let sschar = valueToInt( inval.charAt( ivlen ) );\n        remainder = add( remainder, multiply( sschar, incount ) );\n        num++;\n    }\n    return remainder;\n};\n\n// given an x and y radius and angle get the x, y point on the ellipse\nfunction getEllipsePoint( xr, yr, angle ) {\n    const rAngle = degreesToRadians( angle ),\n        x = multiply( xr, Math.cos( rAngle ) ),\n        y = multiply( yr, Math.sin( rAngle ) );\n\n    return {\n        x: Math.round( x ),\n        y: Math.round( y )\n    };\n};\n\n// give a radius get ALL the points on the circle\nfunction getEllipsePoints( xr, yr ) {\n    const points = [];\n    for ( let startPoint = 0; startPoint <= 360; startPoint++ ) {\n        const nextPoints = getEllipsePoint( xr, yr, startPoint );\n        points.push( nextPoints );\n    }\n    return points;\n};\n\n// given a radius and angle get the x, y point on the circle\nfunction getCirclePoint( r, angle ) {\n    const rAngle = degreesToRadians( angle ),\n        x = multiply( r, Math.cos( rAngle ) ),\n        y = multiply( r, Math.sin( rAngle ) );\n\n    return {\n        x: Math.round( x ),\n        y: Math.round( y )\n    };\n};\n\n// give a radius get ALL the points on the circle\nfunction getCirclePoints( r ) {\n    const points = [];\n    for ( let startPoint = 0; startPoint <= 360; startPoint++ ) {\n        const nextPoints = getCirclePoint( r, startPoint );\n        points.push( nextPoints );\n    }\n    return points;\n};\n\nfunction distanceBetweenCirclesCenters( x1, y1, x2, y2 ) {\n    const diffXSqr = square( subtract( x1, x2 ) ),\n        diffYSqr = square( subtract( y1, y2 ) );\n\n    return Math.sqrt( add( diffXSqr, diffYSqr ) );\n};\n\nfunction getRectangleCenter( width, height ) {\n    return {\n        x: Math.floor( divide( width, 2 ) ),\n        y: Math.floor( divide( height, 2 ) )\n    };\n};\n\nfunction getRectangleCorner( width, height ) {\n    const center = getRectangleCenter( width, height );\n    const p1 = Math.ceil( divide( center.x, 2 ) ),\n        p2 = Math.ceil( divide( center.y, 2 ) );\n    return ( p1 < p2 ? p1 : p2 );\n};\n\nfunction degreesToRadians( x ) {\n    return x * Math.PI / 180;\n};\n\nfunction radiansToDegrees( x ) {\n    return x * 180 / Math.PI;\n};\n\nfunction generateGUID() {\n    const timenow = new Date().getTime() * 1000000,\n        hexval = convertFromBaseTenToBaseX( 16, timenow );\n\n    let guid = '';\n    for ( let i = 0, l = hexval.length; i < l; i += 1 ) {\n        guid += ( hexval[ i ] << 1 );\n    }\n\n    guid = hexval + convertFromBaseTenToBaseX( 16, guid );\n    let result = '';\n    for ( let i = 0, l = guid.length; i < l; i += 1 ) {\n        result += guid[ i ];\n        if ( i > 0 && i % 5 === 0 && i % 10 !== 0 ) {\n            result += \"-\";\n        }\n        if ( i > 0 && i % 9 === 0 ) {\n            result += \"-\";\n        }\n    }\n    if ( result.substring( result.length - 1 ) === \"-\" ) {\n        result = result.substring( 0, result.length - 1 );\n    }\n    return result;\n\n};\n\nconst MathFunctions = {\n    add,\n    subtract,\n    multiply,\n    divide,\n    square,\n    cube,\n    computeLineLength,\n    computePerimeter,\n    computePerimeterByLength,\n    computePerimeterOfSquare,\n    areaOfTriangle,\n    areaOfTrapizoid,\n    pythagorean,\n    average,\n    areaOfCircle,\n    circumferenceOfACircle,\n    surfaceAreaCone,\n    volumeCone,\n    surfaceAreaCylinder,\n    volumeCylinder,\n    surfaceAreaSphere,\n    volumeSphere,\n    inverse,\n    oneOver,\n    factorial,\n    convertFromBaseTenToBaseX,\n    convertFromBaseXToBaseTen,\n    getEllipsePoint,\n    getEllipsePoints,\n    getCirclePoint,\n    getCirclePoints,\n    distanceBetweenCirclesCenters,\n    getRectangleCenter,\n    getRectangleCorner,\n    degreesToRadians,\n    radiansToDegrees,\n    generateGUID\n};\n\nexport {\n    add,\n    subtract,\n    multiply,\n    divide,\n    square,\n    cube,\n    computeLineLength,\n    computePerimeter,\n    computePerimeterByLength,\n    computePerimeterOfSquare,\n    areaOfTriangle,\n    areaOfTrapizoid,\n    pythagorean,\n    average,\n    areaOfCircle,\n    circumferenceOfACircle,\n    surfaceAreaCone,\n    volumeCone,\n    surfaceAreaCylinder,\n    volumeCylinder,\n    surfaceAreaSphere,\n    volumeSphere,\n    inverse,\n    oneOver,\n    factorial,\n    convertFromBaseTenToBaseX,\n    convertFromBaseXToBaseTen,\n    getEllipsePoint,\n    getEllipsePoints,\n    getCirclePoint,\n    getCirclePoints,\n    distanceBetweenCirclesCenters,\n    getRectangleCenter,\n    getRectangleCorner,\n    degreesToRadians,\n    radiansToDegrees,\n    generateGUID\n};\n\nexport default MathFunctions;\n"],"sourceRoot":""}